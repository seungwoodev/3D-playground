import React from 'react';
import { render } from 'react-dom';
import * as THREE from 'three';
import { OrbitControls } from 'three/examples/jsm/controls/OrbitControls';
import * as CANNON from 'cannon';
import CannonDebugRenderer from '../lib/index';

import './styles.css';
const Clock = new THREE.Clock();
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
camera.position.z = 5;
const geometry = new THREE.BoxGeometry(1, 1, 2);
const material = new THREE.MeshBasicMaterial({ color: 0x00ff00 });
const cube = new THREE.Mesh(geometry, material);
scene.add(cube);

const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

const controls = new OrbitControls(camera, renderer.domElement);

const World = new CANNON.World();
World.gravity.set(0, -9.82, 0);

// ? 摩擦力 / 反彈力
const impactMaterial = new CANNON.Material('dice');
const planMaterial = new CANNON.Material('plan');
const dmaterial = new CANNON.ContactMaterial(impactMaterial, planMaterial, {
	friction: 0.3,
	restitution: 0.1,
});
World.addContactMaterial(dmaterial);

// add floor
const planShap = new CANNON.Plane();
const planBody = new CANNON.Body();
planBody.material = planMaterial;
planBody.mass = 0;
planBody.addShape(planShap);
planBody.quaternion.setFromAxisAngle(new CANNON.Vec3(-1, 0, 0), Math.PI / 2);
World.addBody(planBody);

const boxShap = new CANNON.Box(new CANNON.Vec3(2, 5, 5));
const boxBody = new CANNON.Body({
	shape: boxShap,
	position: new CANNON.Vec3(0, 2, 0),
	material: impactMaterial,
});
World.addBody(boxBody);

const arrowShap = new CANNON.Cylinder(2, 2, 1, 32);
arrowShap._debuger = [2, 2, 1, 32];

const Body = new CANNON.Body({
	mass: 1,
	shape: arrowShap,
	position: new CANNON.Vec3(0, 0, 0),
	material: impactMaterial,
});

World.addBody(Body);

const cannonDebugRenderer = new CannonDebugRenderer(scene, World);
cannonDebugRenderer.update();
function animate() {
	requestAnimationFrame(animate);
	renderer.render(scene, camera);
	controls.update();
	const delta = Clock.getDelta();
	World.step(1 / 60, delta, 3);
}
animate();

function Demo() {
	return <></>;
}

render(<Demo />, document.getElementById('app'));
