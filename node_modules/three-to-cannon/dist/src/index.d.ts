import { Quaternion as CQuaternion, Shape, Vec3 } from 'cannon-es';
import { Object3D } from 'three';
export declare enum ShapeType {
    BOX = "Box",
    CYLINDER = "Cylinder",
    SPHERE = "Sphere",
    HULL = "ConvexPolyhedron",
    MESH = "Trimesh"
}
export interface ShapeOptions {
    type?: ShapeType;
    cylinderAxis?: 'x' | 'y' | 'z';
    sphereRadius?: number;
}
export interface ShapeResult<T extends Shape = Shape> {
    shape: T;
    offset?: Vec3;
    orientation?: CQuaternion;
}
/**
 * Given a THREE.Object3D instance, creates a corresponding CANNON shape.
 */
export declare const threeToCannon: (object: Object3D, options?: ShapeOptions) => ShapeResult | null;
